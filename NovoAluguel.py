
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox
import tkinter as tk
import sqlite3
#import tkcalendar PROFESSOR A IDEIA ERA USAR ESSA BIBLIOTECA MAS MEU PC SIMPLESMENTE NAO INSTALA E NAO CONSIGO USAR
#nem ela nem a PIL

class ClienteNaoEncontradoException(Exception):
    pass

class QuartoNaoEncontradoException(Exception):
    pass

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\gugab\Documents\faculdade\4o Periodo\4ADS\2a try\AV2\Exercicios\NovoAluguel\build\assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

entry_nomeCliente = None
entry_Quarto = None
entry_DtEnt = None
entry_DtSai = None

def CriarTabela():
    with sqlite3.connect('crudcabana.db') as conn:
        cursor = conn.cursor()
        cursor.execute("""CREATE TABLE IF NOT EXISTS aluguel (
            Id_aluguel INTEGER PRIMARY KEY AUTOINCREMENT,
            Id_quarto INTEGER,
            Id_cliente INTEGER,
            Data_entrada TEXT,
            Data_saida TEXT,
            FOREIGN KEY (Id_quarto) REFERENCES quarto(id_quarto)
            FOREIGN KEY (id_cliente) REFERENCES cliente(id_cliente)
            )""")

import sqlite3
from tkinter import messagebox

def CriarAluguel():
    global entry_nomeCliente, entry_Quarto, entry_DtEnt, entry_DtSai

    try:
        NomeCliente = entry_nomeCliente.get()
        Quarto = entry_Quarto.get()
        DataEnt = entry_DtEnt.get()
        DataSai = entry_DtSai.get()

        id_cliente = EncontrarCliente(NomeCliente)
        id_quarto = EncontrarQuarto(Quarto)

        with sqlite3.connect('crudcabana.db') as conn:
            cursor = conn.cursor()

            # SQL DE INSERT
            cursor.execute("INSERT INTO aluguel VALUES (NULL, ?,?,?,?)", (id_quarto, id_cliente, DataEnt, DataSai))

            # ENVIANDO DADOS
            conn.commit()

            id_aluguel = cursor.lastrowid
            # MENSAGEM DE SUCESSO
            messagebox.showinfo("Registro", "Aluguel registrado com sucesso!")
            print("Aluguel registrado com sucesso. ID do quarto:", id_aluguel)

    except InterruptedError:
        # Mensagem de erro se o nome de usuário já existe
        messagebox.showerror("Erro", "Aluguel já existe.")
        print("Erro: Aluguel já existe.")
    except Exception as e:
        # Outros erros
        messagebox.showerror("Erro", f"Ocorreu um erro: {str(e)}")
        print("Erro desconhecido:", str(e))
    except ClienteNaoEncontradoException:
        messagebox.showerror("Erro", "Cliente não encontrado.")

def EncontrarCliente(NomeCliente):
    with sqlite3.connect('crudcabana.db') as conn:
        cursor = conn.cursor()
        try:
            cursor.execute("SELECT id_pessoa FROM pessoa WHERE nome = ?", (NomeCliente,))
            resultado = cursor.fetchone()
            if resultado:
                return resultado[0]
            else:
                print("Cliente não encontrado no banco de dados.")
                raise ClienteNaoEncontradoException("Cliente não encontrado")
        except sqlite3.Error as e:
            print("Erro ao executar a consulta:", e)
            raise ClienteNaoEncontradoException("Erro ao buscar cliente")

def EncontrarQuarto(NomeQuarto):
    with sqlite3.connect('crudcabana.db') as conn:
        cursor = conn.cursor()
        try:
            cursor.execute("SELECT id_quarto FROM quarto WHERE Nome_Quarto = ?", (NomeQuarto,))
            resultado = cursor.fetchone()
            if resultado:
                return resultado[0]
            else:
                print("Quarto não encontrado no banco de dados.")
                raise QuartoNaoEncontradoException("Quarto não encontrado")
        except sqlite3.Error as e:
            print("Erro ao executar a consulta:", e)
            raise ClienteNaoEncontradoException("Erro ao buscar quarto")

def receber_Nome(id_log):
    try:
        with sqlite3.connect('crudcabana.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT nome FROM pessoa WHERE id_login = ?", (id_log,))
            resultado = cursor.fetchone()
            if resultado:
                return resultado[0]  # Retorna o nome associado ao id_login
            else:
                return None
    except sqlite3.Error as e:
        print("Erro ao executar a consulta:", e)
        return None

#ALTERANDO ALTURA DA ENTRY
def Entry_height():
    ent_height= 2
    new_font(font, ent_height)
    entry.configure(font=new_font)

def PaginaAlugar(id_log):
    global entry_nomeCliente, entry_Quarto, entry_DtEnt, entry_DtSai
    window = Tk()
    window.title("Hotel CRUDcabana - Novo Aluguel")

    window.geometry("1080x720")
    window.configure(bg = "#FFFFFF")

    fonte= ("Inter Medium", 24 * -1)

    canvas = Canvas(
        window,
        bg = "#FFFFFF",
        height = 720,
        width = 1080,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    #HEAD
    canvas.place(x = 0, y = 0)
    canvas.create_rectangle(
        0.0,
        0.0,
        1080.0,
        83.0,
        fill="#3379E2",
        outline="")

    canvas.create_text(
        390.0,
        27.0,
        anchor="nw",
        text="Hotel Crudcabana",
        fill="#FFFFFF",
        font=fonte
    )

    #BG FORM
    canvas.create_rectangle(
        68.0,
        133.0,
        1032.0,
        664.0,
        fill="#706D6D",
        outline="")

    #HEAD FORMN

    canvas.create_text(
        490.0,
        147.0,
        anchor="nw",
        text="Novo Aluguel",
        fill="#2E71D5",
        font=("Inter Bold", 24 * -1)
    )

    nome_usuario = receber_Nome(id_log)
    canvas.create_text(
            884.0,
            28.0,
            anchor="nw",
            text=f"Olá, {nome_usuario}!",
            fill="#FFFFFF",
            font=("Inter Medium", 18 * -1)
    )

    #ENTRY DO NOME DO CLIENTE
    canvas.create_text(
        103.0,
        204.0,
        anchor="nw",
        text="Nome Do Cliente",
        fill="#FFFFFF",
        font=("Inter Bold", 24 * -1)
    )

    entry_nomeCliente = tk.Entry(window, width=61, font=fonte)
    entry_nomeCliente.place(x=103, y=237)

    #SELECAO QUARTO
    canvas.create_text(
        103.0,
        291.0,
        anchor="nw",
        text="Quarto Escolhido",
        fill="#FFFFFF",
        font=("Inter Bold", 24 * -1)
    )

    entry_Quarto = tk.Entry(window, width=61, font=fonte)
    entry_Quarto.place(x=103, y=324)

    #Entry de Data de Entrada
    canvas.create_text(
        103.0,
        386.0,
        anchor="nw",
        text="Data Entrada (dd/mm/yyyy)",
        fill="#FFFFFF",
        font=("Inter Bold", 24 * -1)
    )

    entry_DtEnt = tk.Entry(window, width=14, font=fonte)
    entry_DtEnt.place(x=103, y=418)

    #Entry Data de Saida
    canvas.create_text(
        453.0,
        386.0,
        anchor="nw",
        text="Data Saída (dd/mm/yyyy)",
        fill="#FFFFFF",
        font=("Inter Bold", 24 * -1)
    )

    entry_DtSai = tk.Entry(window, width=14, font=fonte)
    entry_DtSai.place(x=453, y=418)

    #CRIANDO TABELAS
    CriarTabela()
    #BTN Criar
    estilo_Cadastro = ("Inter Bold", 12, "bold")
    btn_Criar = tk.Button(window, width=21, height=2, text="Cadastrar", font=estilo_Cadastro, command=CriarAluguel)
    btn_Criar.place(x=698, y=534)

    window.resizable(False, False)
    window.mainloop()
